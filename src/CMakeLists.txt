INCLUDE(CheckIncludeFile)

IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++0x")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

IF(MSVC)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_SCL_SECURE_NO_DEPRECATE)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4100 /wd4101 /wd4189 /wd4512 /wd4275 /wd4251 /wd4706 /wd4610 /wd4714 /wd4510")
  IF(USE_STATIC_LIBS)
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_C_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG}")
	
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MD" "/MT"   CMAKE_CXX_FLAGS_MINSIZEREL "${CMAKE_C_FLAGS_RELEASE}")
	STRING(REGEX REPLACE "/MDd" "/MTd" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")
  ENDIF(USE_STATIC_LIBS)

  # Use the highest warning level for visual studio.
  SET(CMAKE_CXX_WARNING_LEVEL 4)
  IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    STRING(REGEX REPLACE "/W[0-4]" "/W4"
           CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  ELSE(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  ENDIF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
ENDIF(MSVC)

SET(Boost_ADDITIONAL_VERSIONS 1.53 1.53.0 1.52 1.52.0 1.51 1.51.0
	1.50 1.50.0 1.49 1.49.0 1.48 1.48.0 1.47 1.47.0)
FIND_PACKAGE(Boost 1.47.0 REQUIRED COMPONENTS program_options)
IF(Boost_FOUND)
  ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB -DBOOST_PROGRAM_OPTIONS_NO_LIB)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
  IF(NOT Boost_USE_STATIC_LIBS)
    ADD_DEFINITIONS(-DBOOST_DYN_LINK -DBOOST_PROGRAM_OPTIONS_DYN_LINK)
  ENDIF(NOT Boost_USE_STATIC_LIBS)
ENDIF(Boost_FOUND)

INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}")
INCLUDE_DIRECTORIES(BEFORE "${CMAKE_CURRENT_BINARY_DIR}/include")

ADD_EXECUTABLE(jak
  jak.cpp
  rexp.cpp
  xorshift64.h
  aliastable.h
  jakargs.xmh
  xm.h
)

TARGET_LINK_LIBRARIES(jak ${Boost_LIBRARIES})

ADD_EXECUTABLE(jak_data
  jak_data.cpp
)
